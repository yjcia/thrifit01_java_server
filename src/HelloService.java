/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class HelloService {

    public interface Iface {

        public String getHelloInterface(String arg1, String arg2) throws TException;

    }

    public interface AsyncIface {

        public void getHelloInterface(
            String arg1, String arg2, AsyncMethodCallback resultHandler)
            throws TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(
                org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public String getHelloInterface(String arg1, String arg2) throws TException {
            send_getHelloInterface(arg1, arg2);
            return recv_getHelloInterface();
        }

        public void send_getHelloInterface(String arg1, String arg2) throws TException {
            getHelloInterface_args args = new getHelloInterface_args();
            args.setArg1(arg1);
            args.setArg2(arg2);
            sendBase("getHelloInterface", args);
        }

        public String recv_getHelloInterface() throws TException {
            getHelloInterface_result result = new getHelloInterface_result();
            receiveBase(result, "getHelloInterface");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT, "getHelloInterface failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(
                org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(
            org.apache.thrift.protocol.TProtocolFactory protocolFactory,
            org.apache.thrift.async.TAsyncClientManager clientManager,
            org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getHelloInterface(
            String arg1, String arg2, AsyncMethodCallback resultHandler)
            throws TException {
            checkReady();
            getHelloInterface_call method_call =
                new getHelloInterface_call(arg1, arg2, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
            System.out.println("invoke");
        }

        public static class getHelloInterface_call extends org.apache.thrift.async.TAsyncMethodCall {

            private String arg1;
            private String arg2;

            public getHelloInterface_call(
                String arg1, String arg2, AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.arg1 = arg1;
                this.arg2 = arg2;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage(
                        "getHelloInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getHelloInterface_args args = new getHelloInterface_args();
                args.setArg1(arg1);
                args.setArg2(arg2);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getHelloInterface();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
        implements org.apache.thrift.TProcessor {

        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(
                iface, getProcessMap(
                new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(
            I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("getHelloInterface", new getHelloInterface());
            return processMap;
        }

        public static class getHelloInterface<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getHelloInterface_args> {

            public getHelloInterface() {
                super("getHelloInterface");
            }

            public getHelloInterface_args getEmptyArgsInstance() {
                return new getHelloInterface_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getHelloInterface_result getResult(I iface, getHelloInterface_args args)
                throws TException {
                getHelloInterface_result result = new getHelloInterface_result();
                result.success = iface.getHelloInterface(args.arg1, args.arg2);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {

        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(
                iface, getProcessMap(
                new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(
            I iface,
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getHelloInterface", new getHelloInterface());
            return processMap;
        }

        public static class getHelloInterface<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getHelloInterface_args, String> {

            public getHelloInterface() {
                super("getHelloInterface");
            }

            public getHelloInterface_args getEmptyArgsInstance() {
                return new getHelloInterface_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        getHelloInterface_result result = new getHelloInterface_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getHelloInterface_result result = new getHelloInterface_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(
                I iface, getHelloInterface_args args, AsyncMethodCallback<String> resultHandler)
                throws TException {
                iface.getHelloInterface(args.arg1, args.arg2, resultHandler);
            }
        }

    }

    public static class getHelloInterface_args
        implements org.apache.thrift.TBase<getHelloInterface_args, getHelloInterface_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getHelloInterface_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getHelloInterface_args");

        private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC =
            new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC =
            new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getHelloInterface_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getHelloInterface_argsTupleSchemeFactory());
        }

        public String arg1; // required
        public String arg2; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ARG1((short) 1, "arg1"),
            ARG2((short) 2, "arg2");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ARG1
                        return ARG1;
                    case 2: // ARG2
                        return ARG2;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(
                _Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData(
                "arg1", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(
                _Fields.ARG2, new org.apache.thrift.meta_data.FieldMetaData(
                "arg2", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHelloInterface_args.class, metaDataMap);
        }

        public getHelloInterface_args() {
        }

        public getHelloInterface_args(
            String arg1,
            String arg2) {
            this();
            this.arg1 = arg1;
            this.arg2 = arg2;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHelloInterface_args(getHelloInterface_args other) {
            if (other.isSetArg1()) {
                this.arg1 = other.arg1;
            }
            if (other.isSetArg2()) {
                this.arg2 = other.arg2;
            }
        }

        public getHelloInterface_args deepCopy() {
            return new getHelloInterface_args(this);
        }

        @Override
        public void clear() {
            this.arg1 = null;
            this.arg2 = null;
        }

        public String getArg1() {
            return this.arg1;
        }

        public getHelloInterface_args setArg1(String arg1) {
            this.arg1 = arg1;
            return this;
        }

        public void unsetArg1() {
            this.arg1 = null;
        }

        /**
         * Returns true if field arg1 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg1() {
            return this.arg1 != null;
        }

        public void setArg1IsSet(boolean value) {
            if (!value) {
                this.arg1 = null;
            }
        }

        public String getArg2() {
            return this.arg2;
        }

        public getHelloInterface_args setArg2(String arg2) {
            this.arg2 = arg2;
            return this;
        }

        public void unsetArg2() {
            this.arg2 = null;
        }

        /**
         * Returns true if field arg2 is set (has been assigned a value) and false otherwise
         */
        public boolean isSetArg2() {
            return this.arg2 != null;
        }

        public void setArg2IsSet(boolean value) {
            if (!value) {
                this.arg2 = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case ARG1:
                    if (value == null) {
                        unsetArg1();
                    } else {
                        setArg1((String) value);
                    }
                    break;

                case ARG2:
                    if (value == null) {
                        unsetArg2();
                    } else {
                        setArg2((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case ARG1:
                    return getArg1();

                case ARG2:
                    return getArg2();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case ARG1:
                    return isSetArg1();
                case ARG2:
                    return isSetArg2();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getHelloInterface_args)
                return this.equals((getHelloInterface_args) that);
            return false;
        }

        public boolean equals(getHelloInterface_args that) {
            if (that == null)
                return false;

            boolean this_present_arg1 = true && this.isSetArg1();
            boolean that_present_arg1 = true && that.isSetArg1();
            if (this_present_arg1 || that_present_arg1) {
                if (!(this_present_arg1 && that_present_arg1))
                    return false;
                if (!this.arg1.equals(that.arg1))
                    return false;
            }

            boolean this_present_arg2 = true && this.isSetArg2();
            boolean that_present_arg2 = true && that.isSetArg2();
            if (this_present_arg2 || that_present_arg2) {
                if (!(this_present_arg2 && that_present_arg2))
                    return false;
                if (!this.arg2.equals(that.arg2))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_arg1 = true && (isSetArg1());
            list.add(present_arg1);
            if (present_arg1)
                list.add(arg1);

            boolean present_arg2 = true && (isSetArg2());
            list.add(present_arg2);
            if (present_arg2)
                list.add(arg2);

            return list.hashCode();
        }

        @Override
        public int compareTo(getHelloInterface_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetArg1()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetArg2()).compareTo(other.isSetArg2());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetArg2()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg2, other.arg2);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getHelloInterface_args(");
            boolean first = true;

            sb.append("arg1:");
            if (this.arg1 == null) {
                sb.append("null");
            } else {
                sb.append(this.arg1);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("arg2:");
            if (this.arg2 == null) {
                sb.append("null");
            } else {
                sb.append(this.arg2);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(
                    new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(
                    new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHelloInterface_argsStandardSchemeFactory implements SchemeFactory {

            public getHelloInterface_argsStandardScheme getScheme() {
                return new getHelloInterface_argsStandardScheme();
            }
        }

        private static class getHelloInterface_argsStandardScheme extends StandardScheme<getHelloInterface_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHelloInterface_args struct)
                throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ARG1
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.arg1 = iprot.readString();
                                struct.setArg1IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ARG2
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.arg2 = iprot.readString();
                                struct.setArg2IsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHelloInterface_args struct)
                throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.arg1 != null) {
                    oprot.writeFieldBegin(ARG1_FIELD_DESC);
                    oprot.writeString(struct.arg1);
                    oprot.writeFieldEnd();
                }
                if (struct.arg2 != null) {
                    oprot.writeFieldBegin(ARG2_FIELD_DESC);
                    oprot.writeString(struct.arg2);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHelloInterface_argsTupleSchemeFactory implements SchemeFactory {

            public getHelloInterface_argsTupleScheme getScheme() {
                return new getHelloInterface_argsTupleScheme();
            }
        }

        private static class getHelloInterface_argsTupleScheme extends TupleScheme<getHelloInterface_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHelloInterface_args struct)
                throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetArg1()) {
                    optionals.set(0);
                }
                if (struct.isSetArg2()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetArg1()) {
                    oprot.writeString(struct.arg1);
                }
                if (struct.isSetArg2()) {
                    oprot.writeString(struct.arg2);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHelloInterface_args struct)
                throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.arg1 = iprot.readString();
                    struct.setArg1IsSet(true);
                }
                if (incoming.get(1)) {
                    struct.arg2 = iprot.readString();
                    struct.setArg2IsSet(true);
                }
            }
        }

    }

    public static class getHelloInterface_result
        implements org.apache.thrift.TBase<getHelloInterface_result, getHelloInterface_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getHelloInterface_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getHelloInterface_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getHelloInterface_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getHelloInterface_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(
                _Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData(
                "success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHelloInterface_result.class, metaDataMap);
        }

        public getHelloInterface_result() {
        }

        public getHelloInterface_result(
            String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHelloInterface_result(getHelloInterface_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getHelloInterface_result deepCopy() {
            return new getHelloInterface_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getHelloInterface_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getHelloInterface_result)
                return this.equals((getHelloInterface_result) that);
            return false;
        }

        public boolean equals(getHelloInterface_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getHelloInterface_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getHelloInterface_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(
                    new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(
                    new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHelloInterface_resultStandardSchemeFactory implements SchemeFactory {

            public getHelloInterface_resultStandardScheme getScheme() {
                return new getHelloInterface_resultStandardScheme();
            }
        }

        private static class getHelloInterface_resultStandardScheme extends StandardScheme<getHelloInterface_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHelloInterface_result struct)
                throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHelloInterface_result struct)
                throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHelloInterface_resultTupleSchemeFactory implements SchemeFactory {

            public getHelloInterface_resultTupleScheme getScheme() {
                return new getHelloInterface_resultTupleScheme();
            }
        }

        private static class getHelloInterface_resultTupleScheme extends TupleScheme<getHelloInterface_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHelloInterface_result struct)
                throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHelloInterface_result struct)
                throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }


}
